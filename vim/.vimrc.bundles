" Patch fonts - https://github.com/powerline/fonts

" https://github.com/junegunn/vim-plug
" $ vim -u $HOME/.vimrc.bundles +PlugInstall +PlugClean! +qa
call plug#begin('~/.vim/plugged')

" Appearance & Looks
" =============================================================================
" Colorschemes
Plug 'sickill/vim-monokai'
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'sjl/badwolf'
Plug 'srcery-colors/srcery-vim'
" {{{
  " Make the gutters darker than the background.
  let g:badwolf_darkgutter = 1
" }}}

" Need Nerd fonts
Plug 'ryanoasis/vim-devicons'

" Search and replace
Plug 'brooth/far.vim'
" {{{
let g:far#enable_undo=1

set lazyredraw            " improve scrolling performance when navigating through large results
" }}}

Plug 'mhinz/vim-startify'
"
" Change to use coc-exlorer
" Plug 'scrooloose/nerdtree'
" Plug 'jistr/vim-nerdtree-tabs'
" {{{
" noremap <F1> <CR>:NERDTreeToggle<CR>

" - jistr/vim-nerdtree-tabs
" Open/close NERDTree Tabs with \t
" nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
" let g:nerdtree_tabs_open_on_console_startup = 0
" let g:nerdtree_tabs_open_on_gui_startup = 0
" }}}

Plug 'itchyny/lightline.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-surround'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf.vim'
" {{{
  " Launch fzf with Ctrl-P in multiselect mode
  nnoremap <silent> <C-p> :FZF -m<CR>
  " other common things with fzf
  " nnoremap <silent> <Leader><Enter> :Buffers<CR>
  " nnoremap <silent> <Leader>l :Lines<CR>
" }}}
Plug 'vim-scripts/tComment'
Plug 'szw/vim-maximizer'
" {{{
" - maximizer
nnoremap <silent><F3> :MaximizerToggle<CR>
vnoremap <silent><F3> :MaximizerToggle<CR>gv
inoremap <silent><F3> <C-o>:MaximizerToggle<CR>
" }}}

"Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
" {{{
" Required after having changed the colorscheme
hi clear SignColumn
" }}}

Plug 'editorconfig/editorconfig-vim'
" {{{
  let g:EditorConfig_exclude_patterns = ['fugitive://.\*']
" }}}

Plug 'dag/vim2hs', { 'for': 'hs' }
Plug 'ekalinin/Dockerfile.vim'
Plug 'mxw/vim-jsx', { 'for': 'jsx' }
" Plug 'fatih/vim-go', { 'for': 'go' }
" {{{
  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_generate_tags = 1
" }}}
Plug 'udalov/kotlin-vim', { 'for': ['kt', 'kts'] }
Plug 'derekwyatt/vim-scala', { 'for': ['scala', 'sbt'] }
" {{{
  au BufRead,BufNewFile *.sbt set filetype=scala
" }}}
Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'mzlogin/vim-markdown-toc', { 'for': ['markdown', 'md'] }
Plug 'dhruvasagar/vim-table-mode', { 'for': ['markdown', 'md'] }
" {{{
function! s:isAtStartOfLine(mapping)
  let text_before_cursor = getline('.')[0 : col('.')-1]
  let mapping_pattern = '\V' . escape(a:mapping, '\')
  let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
  return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
endfunction

inoreabbrev <expr> <bar><bar>
          \ <SID>isAtStartOfLine('\|\|') ?
          \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
inoreabbrev <expr> __
          \ <SID>isAtStartOfLine('__') ?
          \ '<c-o>:silent! TableModeDisable<cr>' : '__'
" }}}

Plug 'mbbill/undotree'     " Intelligent undo tree.
" {{{
  nnoremap <leader>u :UndotreeToggle<CR>
  " layout - left undotree, bottom diff
  let g:undotree_WindowLayout = 2
" }}}

" LSP
" CocInstall coc-git coc-explorer coc-lists coc-yaml coc-java
" CocConfig - https://octetz.com/posts/vim-as-go-ide
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" {{{
  source ~/.vimrc.cocrc
" }}}
" Tags & lsp
" Plug 'liuchengxu/vista.vim'

" Plug 'junegunn/limelight.vim'

" local bundles
if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()

" vim:sw=2:ts=2:et:foldenable:foldlevel=0:foldmethod=marker:
